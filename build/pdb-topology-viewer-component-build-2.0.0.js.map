{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack:///./node_modules/@babel/runtime/helpers/createClass.js","webpack:///./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/get.js","webpack:///./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime/helpers/inherits.js","webpack:///./node_modules/@babel/runtime/helpers/typeof.js","webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack:///./node_modules/@babel/runtime/regenerator/index.js","webpack:///./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack:///./node_modules/@babel/runtime/helpers/wrapNativeSuper.js","webpack:///./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime/helpers/superPropBase.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack:///./node_modules/regenerator-runtime/runtime.js","webpack:///./node_modules/@babel/runtime/helpers/isNativeFunction.js","webpack:///./node_modules/@babel/runtime/helpers/construct.js","webpack:///../src/lib/directive.ts","webpack:///../src/lib/dom.ts","webpack:///../src/lib/part.ts","webpack:///../src/lib/template.ts","webpack:///../src/lib/template-instance.ts","webpack:///../src/lib/template-result.ts","webpack:///../src/lib/parts.ts","webpack:///../src/lib/default-template-processor.ts","webpack:///../src/lib/template-factory.ts","webpack:///../src/lib/render.ts","webpack:///src/lit-html.ts","webpack:///../src/lib/modify-template.ts","webpack:///../src/lib/shady-render.ts","webpack:///../src/lib/updating-element.ts","webpack:///../src/lib/decorators.ts","webpack:///../src/lib/css-tag.ts","webpack:///src/lit-element.ts","webpack:///./src/web-component/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","configurable","writable","protoProps","staticProps","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","superPropBase","_get","receiver","Reflect","base","desc","getOwnPropertyDescriptor","_typeof","assertThisInitialized","self","subClass","superClass","constructor","obj","iterator","arrayWithoutHoles","iterableToArray","nonIterableSpread","arr","_setPrototypeOf","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","fn","this","args","arguments","apply","err","undefined","isNativeFunction","construct","_wrapNativeSuper","Class","_cache","Map","has","set","Wrapper","ReferenceError","Array","isArray","arr2","iter","toString","from","runtime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","context","Context","_invoke","state","method","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","invoke","result","__await","unwrapped","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","awrap","async","keys","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","indexOf","isNativeReflectConstruct","sham","Proxy","Date","e","_construct","Parent","a","directives","WeakMap","isDirective","isCEPolyfill","window","customElements","polyfillWrapFlushCallback","removeNodes","container","start","end","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","nodeMarker","markerRegex","RegExp","element","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","node","nextNode","nodeType","hasAttributes","attributes","count","endsWith","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","tagName","currentNode","data","parent","parentNode","lastIndex","insert","createMarker","match","createTextNode","insertBefore","previousSibling","str","suffix","isTemplatePartActive","part","createComment","template","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isIterable","dirty","_createPart","text","v","setAttribute","_getValue","committer","directive","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","_clone","itemPart","itemParts","item","NodePart","appendIntoPart","insertAfterPart","single","eventOptionsSupported","addEventListener","removeEventListener","_e","eventName","eventContext","__boundHandleEvent","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","event","prefix","templateCache","templateCaches","stringsArray","keyString","join","getTemplateElement","removeNodesFromTemplate","removeCount","nodesToRemoveInTemplate","currentRemovingNode","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","renderedDOM","add","templateElement","styles","querySelectorAll","condensedStyle","textContent","templates","refNode","insertCount","walkerIndex","walkerNode","insertNodeIntoTemplate","firstChild","prepareTemplateStyles","style","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","toAttribute","Boolean","JSON","stringify","fromAttribute","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","_saveInstanceProperties","_requestUpdate","_classProperties","_v","_attributeToProperty","attr","_attributeNameForProperty","attrValue","_propertyValueToAttribute","propName","_attributeToPropertyMap","_propertyValueFromAttribute","oldValue","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","previousUpdatePromise","res","rej","_hasConnected","performUpdate","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","k","_propertyToAttribute","_getUpdateComplete","superProperties","_ensureClassProperties","noAccessor","superCtor","finalize","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","HTMLElement","supportsAdoptingStyleSheets","Document","CSSStyleSheet","flattenStyles","flat","Infinity","arrayFlat","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","_styles","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","cssText","localName","hasUpdated","styleElement","templateResult","render","_getUniqueStyles","userStyles","reduceRight","unshift","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","appendInto","delete","PdbTopologyViewer","pdbId","entityId","chainId","validateParams","viewInstance","PdbTopologyViewerPlugin","invokePlugin","LitElement","define"],"mappings":"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","file":"pdb-topology-viewer-component-build-2.0.0.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var superPropBase = require(\"./superPropBase\");\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    module.exports = _get = Reflect.get;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nmodule.exports = _get;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeFunction = require(\"./isNativeFunction\");\n\nvar construct = require(\"./construct\");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase;","function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nmodule.exports = _isNativeFunction;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct;","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// tslint:disable-next-line:no-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node',\n  index: number\n}|{readonly type: 'attribute', index: number, readonly name: string, readonly strings: ReadonlyArray<string>};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: ReadonlyArray<unknown>) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: ReadonlyArray<unknown>;\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: ReadonlyArray<unknown>,\n      type: string, processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment poisition.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceeding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceeding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|Symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // tslint:disable-next-line:no-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // tslint:disable-next-line:no-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    }\n  };\n  // tslint:disable-next-line:no-any\n  window.addEventListener('test', options as any, options);\n  // tslint:disable-next-line:no-any\n  window.removeEventListener('test', options as any, options);\n} catch (_e) {\n}\n\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behaviour, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport type templateCache = {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>; //\n  readonly keyString: Map<string, Template>;\n};\n\nexport const templateCaches = new Map<string, templateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module shady-render\n */\n\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(\n    template: Template, nodesToRemove: Set<Node>) {\n  const {element: {content}, parts} = template;\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let part = parts[partIndex];\n  let nodeIndex = -1;\n  let removeCount = 0;\n  const nodesToRemoveInTemplate = [];\n  let currentRemovingNode: Node|null = null;\n  while (walker.nextNode()) {\n    nodeIndex++;\n    const node = walker.currentNode as Element;\n    // End removal if stepped past the removing node\n    if (node.previousSibling === currentRemovingNode) {\n      currentRemovingNode = null;\n    }\n    // A node to remove was found in the template\n    if (nodesToRemove.has(node)) {\n      nodesToRemoveInTemplate.push(node);\n      // Track node we're removing\n      if (currentRemovingNode === null) {\n        currentRemovingNode = node;\n      }\n    }\n    // When removing, increment count by which to adjust subsequent part indices\n    if (currentRemovingNode !== null) {\n      removeCount++;\n    }\n    while (part !== undefined && part.index === nodeIndex) {\n      // If part is in a removed node deactivate it by setting index to -1 or\n      // adjust the index as needed.\n      part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n      // go to the next active part.\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n      part = parts[partIndex];\n    }\n  }\n  nodesToRemoveInTemplate.forEach((n) => n.parentNode!.removeChild(n));\n}\n\nconst countNodes = (node: Node) => {\n  let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n  const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n  while (walker.nextNode()) {\n    count++;\n  }\n  return count;\n};\n\nconst nextActiveIndexInTemplateParts =\n    (parts: TemplatePart[], startIndex: number = -1) => {\n      for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(\n    template: Template, node: Node, refNode: Node|null = null) {\n  const {element: {content}, parts} = template;\n  // If there's no refNode, then put node at end of template.\n  // No part indices need to be shifted in this case.\n  if (refNode === null || refNode === undefined) {\n    content.appendChild(node);\n    return;\n  }\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let insertCount = 0;\n  let walkerIndex = -1;\n  while (walker.nextNode()) {\n    walkerIndex++;\n    const walkerNode = walker.currentNode as Element;\n    if (walkerNode === refNode) {\n      insertCount = countNodes(node);\n      refNode.parentNode!.insertBefore(node, refNode);\n    }\n    while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n      // If we've inserted the node, simply adjust all subsequent parts\n      if (insertCount > 0) {\n        while (partIndex !== -1) {\n          parts[partIndex].index += insertCount;\n          partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n        return;\n      }\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n    }\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {removeNodes} from './dom.js';\nimport {insertNodeIntoTemplate, removeNodesFromTemplate} from './modify-template.js';\nimport {RenderOptions} from './render-options.js';\nimport {parts, render as litRender} from './render.js';\nimport {templateCaches} from './template-factory.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\nexport {html, svg, TemplateResult} from '../lit-html.js';\n\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type: string, scopeName: string) =>\n    `${type}--${scopeName}`;\n\nlet compatibleShadyCSSVersion = true;\n\nif (typeof window.ShadyCSS === 'undefined') {\n  compatibleShadyCSSVersion = false;\n} else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n  console.warn(\n      `Incompatible ShadyCSS version detected. ` +\n      `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n      `@webcomponents/shadycss@1.3.1.`);\n  compatibleShadyCSSVersion = false;\n}\n\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName: string) =>\n    (result: TemplateResult) => {\n      const cacheKey = getTemplateCacheKey(result.type, scopeName);\n      let templateCache = templateCaches.get(cacheKey);\n      if (templateCache === undefined) {\n        templateCache = {\n          stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n          keyString: new Map<string, Template>()\n        };\n        templateCaches.set(cacheKey, templateCache);\n      }\n\n      let template = templateCache.stringsArray.get(result.strings);\n      if (template !== undefined) {\n        return template;\n      }\n\n      const key = result.strings.join(marker);\n      template = templateCache.keyString.get(key);\n      if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n          window.ShadyCSS!.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n      }\n      templateCache.stringsArray.set(result.strings, template);\n      return template;\n    };\n\nconst TEMPLATE_TYPES = ['html', 'svg'];\n\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName: string) => {\n  TEMPLATE_TYPES.forEach((type) => {\n    const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n    if (templates !== undefined) {\n      templates.keyString.forEach((template) => {\n        const {element: {content}} = template;\n        // IE 11 doesn't support the iterable param Set constructor\n        const styles = new Set<Element>();\n        Array.from(content.querySelectorAll('style')).forEach((s: Element) => {\n          styles.add(s);\n        });\n        removeNodesFromTemplate(template, styles);\n      });\n    }\n  });\n};\n\nconst shadyRenderSet = new Set<string>();\n\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles =\n    (scopeName: string, renderedDOM: DocumentFragment, template?: Template) => {\n      shadyRenderSet.add(scopeName);\n      // If `renderedDOM` is stamped from a Template, then we need to edit that\n      // Template's underlying template element. Otherwise, we create one here\n      // to give to ShadyCSS, which still requires one while scoping.\n      const templateElement =\n          !!template ? template.element : document.createElement('template');\n      // Move styles out of rendered DOM and store.\n      const styles = renderedDOM.querySelectorAll('style');\n      const {length} = styles;\n      // If there are no styles, skip unnecessary work\n      if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS!.prepareTemplateStyles(templateElement, scopeName);\n        return;\n      }\n      const condensedStyle = document.createElement('style');\n      // Collect styles into a single style. This helps us make sure ShadyCSS\n      // manipulations will not prevent us from being able to fix up template\n      // part indices.\n      // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n      // currently does this anyway. When it does not, this should be changed.\n      for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode!.removeChild(style);\n        condensedStyle.textContent! += style.textContent;\n      }\n      // Remove styles from nested templates in this scope.\n      removeStylesFromLitTemplates(scopeName);\n      // And then put the condensed style into the \"root\" template passed in as\n      // `template`.\n      const content = templateElement.content;\n      if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n      } else {\n        content.insertBefore(condensedStyle, content.firstChild);\n      }\n      // Note, it's important that ShadyCSS gets the template that `lit-html`\n      // will actually render so that it can update the style inside when\n      // needed (e.g. @apply native Shadow DOM case).\n      window.ShadyCSS!.prepareTemplateStyles(templateElement, scopeName);\n      const style = content.querySelector('style');\n      if (window.ShadyCSS!.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n      } else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set<Node>();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n      }\n    };\n\nexport interface ShadyRenderOptions extends Partial<RenderOptions> {\n  scopeName: string;\n}\n\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment|ShadowRoot,\n     options: ShadyRenderOptions) => {\n      if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n      }\n      const scopeName = options.scopeName;\n      const hasRendered = parts.has(container);\n      const needsScoping = compatibleShadyCSSVersion &&\n          container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n          !!(container as ShadowRoot).host;\n      // Handle first render to a scope specially...\n      const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n      // On first scope render, render into a fragment; this cannot be a single\n      // fragment that is reused since nested renders can occur synchronously.\n      const renderContainer =\n          firstScopeRender ? document.createDocumentFragment() : container;\n      litRender(\n          result,\n          renderContainer,\n          {templateFactory: shadyTemplateFactory(scopeName), ...options} as\n              RenderOptions);\n      // When performing first scope render,\n      // (1) We've rendered into a fragment so that there's a chance to\n      // `prepareTemplateStyles` before sub-elements hit the DOM\n      // (which might cause them to render based on a common pattern of\n      // rendering in a custom element's `connectedCallback`);\n      // (2) Scope the template with ShadyCSS one time only for this scope.\n      // (3) Render the fragment into the container and make sure the\n      // container knows its `part` is the one we just rendered. This ensures\n      // DOM will be re-used on subsequent renders.\n      if (firstScopeRender) {\n        const part = parts.get(renderContainer)!;\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(\n            scopeName, renderContainer as DocumentFragment, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n      }\n      // After elements have hit the DOM, update styling if this is the\n      // initial render to this container.\n      // This is needed whenever dynamic changes are made so it would be\n      // safest to do every render; however, this would regress performance\n      // so we leave it up to the user to call `ShadyCSS.styleElement`\n      // for dynamic changes.\n      if (!hasRendered && needsScoping) {\n        window.ShadyCSS!.styleElement((container as ShadowRoot).host);\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    <P extends PropertyKey>(prop: P, _obj: unknown): P => prop;\n\ndeclare global {\n  var JSCompiler_renameProperty: <P extends PropertyKey>(\n      prop: P, _obj: unknown) => P;\n\n  interface Window {\n    JSCompiler_renameProperty: typeof JSCompiler_renameProperty;\n  }\n}\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Function called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string|null, type?: TypeHint): Type;\n\n  /**\n   * Function called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n    ComplexAttributeConverter<Type>|((value: string, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean|string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\nexport type PropertyValues = Map<PropertyKey, unknown>;\n\nexport const defaultConverter: ComplexAttributeConverter = {\n\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        return value ? '' : null;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        return value == null ? value : JSON.stringify(value);\n    }\n    return value;\n  },\n\n  fromAttribute(value: string|null, type?: unknown) {\n    switch (type) {\n      case Boolean:\n        return value !== null;\n      case Number:\n        return value === null ? null : Number(value);\n      case Object:\n      case Array:\n        return JSON.parse(value!);\n    }\n    return value;\n  }\n\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual\n};\n\nconst microtaskPromise = Promise.resolve(true);\n\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\ntype UpdateState = typeof STATE_HAS_UPDATED|typeof STATE_UPDATE_REQUESTED|\n    typeof STATE_IS_REFLECTING_TO_ATTRIBUTE|\n    typeof STATE_IS_REFLECTING_TO_PROPERTY|typeof STATE_HAS_CONNECTED;\n\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport abstract class UpdatingElement extends HTMLElement {\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   */\n  private static _attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static[finalized] = true;\n\n  /**\n   * Memoized list of all class properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   */\n  private static _classProperties?: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring the property.\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this._classProperties!.forEach((v, p) => {\n      const attr = this._attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this._attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Ensures the private `_classProperties` property metadata is created.\n   * In addition to `finalize` this is also called in `createProperty` to\n   * ensure the `@property` decorator can add property metadata.\n   */\n  /** @nocollapse */\n  private static _ensureClassProperties() {\n    // ensure private storage for property declarations.\n    if (!this.hasOwnProperty(\n            JSCompiler_renameProperty('_classProperties', this))) {\n      this._classProperties = new Map();\n      // NOTE: Workaround IE11 not supporting Map constructor argument.\n      const superProperties: PropertyDeclarationMap =\n          Object.getPrototypeOf(this)._classProperties;\n      if (superProperties !== undefined) {\n        superProperties.forEach(\n            (v: PropertyDeclaration, k: PropertyKey) =>\n                this._classProperties!.set(k, v));\n      }\n    }\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist.\n   * The property setter calls the property's `hasChanged` property option\n   * or uses a strict identity check to determine whether or not to request\n   * an update.\n   * @nocollapse\n   */\n  static createProperty(\n      name: PropertyKey,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure storage exists for property\n    // metadata.\n    this._ensureClassProperties();\n    this._classProperties!.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n      return;\n    }\n    const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n    Object.defineProperty(this.prototype, name, {\n      // tslint:disable-next-line:no-any no symbol in index\n      get(): any {\n        return (this as {[key: string]: unknown})[key as string];\n      },\n      set(this: UpdatingElement, value: unknown) {\n        const oldValue =\n            (this as {} as {[key: string]: unknown})[name as string];\n        (this as {} as {[key: string]: unknown})[key as string] = value;\n        (this as unknown as UpdatingElement)._requestUpdate(name, oldValue);\n      },\n      configurable: true,\n      enumerable: true\n    });\n  }\n\n  /**\n   * Creates property accessors for registered properties and ensures\n   * any superclasses are also finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this);\n    if (!superCtor.hasOwnProperty(finalized)) {\n      superCtor.finalize();\n    }\n    this[finalized] = true;\n    this._ensureClassProperties();\n    // initialize Map populated in observedAttributes\n    this._attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...(typeof Object.getOwnPropertySymbols === 'function') ?\n            Object.getOwnPropertySymbols(props) :\n            []\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeSript lack of support for symbol in\n        // index types\n        // tslint:disable-next-line:no-any no symbol in index\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n  }\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static _attributeNameForProperty(\n      name: PropertyKey, options: PropertyDeclaration) {\n    const attribute = options.attribute;\n    return attribute === false ?\n        undefined :\n        (typeof attribute === 'string' ?\n             attribute :\n             (typeof name === 'string' ? name.toLowerCase() : undefined));\n  }\n\n  /**\n   * Returns true if a property should request an update.\n   * Called when a property value is set and uses the `hasChanged`\n   * option for the property if present or a strict identity check.\n   * @nocollapse\n   */\n  private static _valueHasChanged(\n      value: unknown, old: unknown, hasChanged: HasChanged = notEqual) {\n    return hasChanged(value, old);\n  }\n\n  /**\n   * Returns the property value for the given attribute value.\n   * Called via the `attributeChangedCallback` and uses the property's\n   * `converter` or `converter.fromAttribute` property option.\n   * @nocollapse\n   */\n  private static _propertyValueFromAttribute(\n      value: string|null, options: PropertyDeclaration) {\n    const type = options.type;\n    const converter = options.converter || defaultConverter;\n    const fromAttribute =\n        (typeof converter === 'function' ? converter : converter.fromAttribute);\n    return fromAttribute ? fromAttribute(value, type) : value;\n  }\n\n  /**\n   * Returns the attribute value for the given property value. If this\n   * returns undefined, the property will *not* be reflected to an attribute.\n   * If this returns null, the attribute will be removed, otherwise the\n   * attribute will be set to the value.\n   * This uses the property's `reflect` and `type.toAttribute` property options.\n   * @nocollapse\n   */\n  private static _propertyValueToAttribute(\n      value: unknown, options: PropertyDeclaration) {\n    if (options.reflect === undefined) {\n      return;\n    }\n    const type = options.type;\n    const converter = options.converter;\n    const toAttribute =\n        converter && (converter as ComplexAttributeConverter).toAttribute ||\n        defaultConverter.toAttribute;\n    return toAttribute!(value, type);\n  }\n\n  private _updateState: UpdateState = 0;\n  private _instanceProperties: PropertyValues|undefined = undefined;\n  private _updatePromise: Promise<unknown> = microtaskPromise;\n  private _hasConnectedResolver: (() => void)|undefined = undefined;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   */\n  private _changedProperties: PropertyValues = new Map();\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private _reflectingProperties: Map<PropertyKey, PropertyDeclaration>|\n      undefined = undefined;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  /**\n   * Performs element initialization. By default captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    this._saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this._requestUpdate();\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private _saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof UpdatingElement)\n        ._classProperties!.forEach((_v, p) => {\n          if (this.hasOwnProperty(p)) {\n            const value = this[p as keyof this];\n            delete this[p as keyof this];\n            if (!this._instanceProperties) {\n              this._instanceProperties = new Map();\n            }\n            this._instanceProperties.set(p, value);\n          }\n        });\n  }\n\n  /**\n   * Applies previously saved instance properties.\n   */\n  private _applyInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    // tslint:disable-next-line:no-any\n    this._instanceProperties!.forEach((v, p) => (this as any)[p] = v);\n    this._instanceProperties = undefined;\n  }\n\n  connectedCallback() {\n    this._updateState = this._updateState | STATE_HAS_CONNECTED;\n    // Ensure first connection completes an update. Updates cannot complete\n    // before connection and if one is pending connection the\n    // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n    // update, otherwise requestUpdate.\n    if (this._hasConnectedResolver) {\n      this._hasConnectedResolver();\n      this._hasConnectedResolver = undefined;\n    }\n  }\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   */\n  disconnectedCallback() {\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   */\n  attributeChangedCallback(name: string, old: string|null, value: string|null) {\n    if (old !== value) {\n      this._attributeToProperty(name, value);\n    }\n  }\n\n  private _propertyToAttribute(\n      name: PropertyKey, value: unknown,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const attr = ctor._attributeNameForProperty(name, options);\n    if (attr !== undefined) {\n      const attrValue = ctor._propertyValueToAttribute(value, options);\n      // an undefined value does not change the attribute.\n      if (attrValue === undefined) {\n        return;\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n    }\n  }\n\n  private _attributeToProperty(name: string, value: string|null) {\n    // Use tracking info to avoid deserializing attribute value if it was\n    // just set from a property setter.\n    if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n      return;\n    }\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const propName = ctor._attributeToPropertyMap.get(name);\n    if (propName !== undefined) {\n      const options =\n          ctor._classProperties!.get(propName) || defaultPropertyDeclaration;\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n      this[propName as keyof this] =\n          // tslint:disable-next-line:no-any\n          ctor._propertyValueFromAttribute(value, options) as any;\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n    }\n  }\n\n  /**\n   * This private version of `requestUpdate` does not access or return the\n   * `updateComplete` promise. This promise can be overridden and is therefore\n   * not free to access.\n   */\n  private _requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      const ctor = this.constructor as typeof UpdatingElement;\n      const options =\n          ctor._classProperties!.get(name) || defaultPropertyDeclaration;\n      if (ctor._valueHasChanged(\n              this[name as keyof this], oldValue, options.hasChanged)) {\n        if (!this._changedProperties.has(name)) {\n          this._changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true &&\n            !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n          if (this._reflectingProperties === undefined) {\n            this._reflectingProperties = new Map();\n          }\n          this._reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n      this._enqueueUpdate();\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should\n   * be called when an element should update based on some state not triggered\n   * by setting a property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored. Returns the `updateComplete` Promise which is resolved\n   * when the update completes.\n   *\n   * @param name {PropertyKey} (optional) name of requesting property\n   * @param oldValue {any} (optional) old value of requesting property\n   * @returns {Promise} A Promise that is resolved when the update completes.\n   */\n  requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    this._requestUpdate(name, oldValue);\n    return this.updateComplete;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async _enqueueUpdate() {\n    // Mark state updating...\n    this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n    let resolve!: (r: boolean) => void;\n    let reject!: (e: Error) => void;\n    const previousUpdatePromise = this._updatePromise;\n    this._updatePromise = new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await previousUpdatePromise;\n    } catch (e) {\n      // Ignore any previous errors. We only care that the previous cycle is\n      // done. Any error should have been handled in the previous update.\n    }\n    // Make sure the element has connected before updating.\n    if (!this._hasConnected) {\n      await new Promise((res) => this._hasConnectedResolver = res);\n    }\n    try {\n      const result = this.performUpdate();\n      // If `performUpdate` returns a Promise, we await it. This is done to\n      // enable coordinating updates with a scheduler. Note, the result is\n      // checked to avoid delaying an additional microtask unless we need to.\n      if (result != null) {\n        await result;\n      }\n    } catch (e) {\n      reject(e);\n    }\n    resolve(!this._hasRequestedUpdate);\n  }\n\n  private get _hasConnected() {\n    return (this._updateState & STATE_HAS_CONNECTED);\n  }\n\n  private get _hasRequestedUpdate() {\n    return (this._updateState & STATE_UPDATE_REQUESTED);\n  }\n\n  protected get hasUpdated() {\n    return (this._updateState & STATE_HAS_UPDATED);\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * You can override this method to change the timing of updates. If this\n   * method is overridden, `super.performUpdate()` must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```\n   * protected async performUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.performUpdate();\n   * }\n   * ```\n   */\n  protected performUpdate(): void|Promise<unknown> {\n    // Mixin instance properties once, if they exist.\n    if (this._instanceProperties) {\n      this._applyInstanceProperties();\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.update(changedProperties);\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      throw e;\n    } finally {\n      // Ensure element can accept additional updates after an exception.\n      this._markUpdated();\n    }\n    if (shouldUpdate) {\n      if (!(this._updateState & STATE_HAS_UPDATED)) {\n        this._updateState = this._updateState | STATE_HAS_UPDATED;\n        this.firstUpdated(changedProperties);\n      }\n      this.updated(changedProperties);\n    }\n  }\n\n  private _markUpdated() {\n    this._changedProperties = new Map();\n    this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `_getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super._getUpdateComplete()`, then any subsequent state.\n   *\n   * @returns {Promise} The Promise returns a boolean that indicates if the\n   * update resolved without triggering another update.\n   */\n  get updateComplete() {\n    return this._getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   *   class MyElement extends LitElement {\n   *     async _getUpdateComplete() {\n   *       await super._getUpdateComplete();\n   *       await this._myChild.updateComplete;\n   *     }\n   *   }\n   */\n  protected _getUpdateComplete() {\n    return this._updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this._reflectingProperties !== undefined &&\n        this._reflectingProperties.size > 0) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this._reflectingProperties.forEach(\n          (v, k) => this._propertyToAttribute(k, this[k as keyof this], v));\n      this._reflectingProperties = undefined;\n    }\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected updated(_changedProperties: PropertyValues) {\n  }\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {LitElement} from '../lit-element.js';\n\nimport {PropertyDeclaration, UpdatingElement} from './updating-element.js';\n\nexport type Constructor<T> = {\n  new (...args: unknown[]): T\n};\n\n// From the TC39 Decorators proposal\ninterface ClassDescriptor {\n  kind: 'class';\n  elements: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n}\n\n// From the TC39 Decorators proposal\ninterface ClassElement {\n  kind: 'field'|'method';\n  key: PropertyKey;\n  placement: 'static'|'prototype'|'own';\n  initializer?: Function;\n  extras?: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n  descriptor?: PropertyDescriptor;\n}\n\nconst legacyCustomElement =\n    (tagName: string, clazz: Constructor<HTMLElement>) => {\n      window.customElements.define(tagName, clazz);\n      // Cast as any because TS doesn't recognize the return type as being a\n      // subtype of the decorated class when clazz is typed as\n      // `Constructor<HTMLElement>` for some reason.\n      // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n      // applied to elements however.\n      // tslint:disable-next-line:no-any\n      return clazz as any;\n    };\n\nconst standardCustomElement =\n    (tagName: string, descriptor: ClassDescriptor) => {\n      const {kind, elements} = descriptor;\n      return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz: Constructor<HTMLElement>) {\n          window.customElements.define(tagName, clazz);\n        }\n      };\n    };\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName: string) =>\n    (classOrDescriptor: Constructor<HTMLElement>|ClassDescriptor) =>\n        (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\n\nconst standardProperty =\n    (options: PropertyDeclaration, element: ClassElement) => {\n      // When decorating an accessor, pass it through and add property metadata.\n      // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n      // stomp over the user's accessor.\n      if (element.kind === 'method' && element.descriptor &&\n          !('value' in element.descriptor)) {\n        return {\n          ...element,\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      } else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n          kind: 'field',\n          key: Symbol(),\n          placement: 'own',\n          descriptor: {},\n          // When @babel/plugin-proposal-decorators implements initializers,\n          // do this instead of the initializer below. See:\n          // https://github.com/babel/babel/issues/9260 extras: [\n          //   {\n          //     kind: 'initializer',\n          //     placement: 'own',\n          //     initializer: descriptor.initializer,\n          //   }\n          // ],\n          initializer(this: {[key: string]: unknown}) {\n            if (typeof element.initializer === 'function') {\n              this[element.key as string] = element.initializer.call(this);\n            }\n          },\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      }\n    };\n\nconst legacyProperty =\n    (options: PropertyDeclaration, proto: Object, name: PropertyKey) => {\n      (proto.constructor as typeof UpdatingElement)\n          .createProperty(name, options);\n    };\n\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration) {\n  // tslint:disable-next-line:no-any decorator\n  return (protoOrDescriptor: Object|ClassElement, name?: PropertyKey): any =>\n             (name !== undefined) ?\n      legacyProperty(options!, protoOrDescriptor as Object, name) :\n      standardProperty(options!, protoOrDescriptor as ClassElement);\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelectorAll(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\nconst legacyQuery =\n    (descriptor: PropertyDescriptor, proto: Object, name: PropertyKey) => {\n      Object.defineProperty(proto, name, descriptor);\n    };\n\nconst standardQuery = (descriptor: PropertyDescriptor, element: ClassElement) =>\n    ({\n      kind: 'method',\n      placement: 'prototype',\n      key: element.key,\n      descriptor,\n    });\n\nconst standardEventOptions =\n    (options: AddEventListenerOptions, element: ClassElement) => {\n      return {\n        ...element,\n        finisher(clazz: typeof UpdatingElement) {\n          Object.assign(\n              clazz.prototype[element.key as keyof UpdatingElement], options);\n        }\n      };\n    };\n\nconst legacyEventOptions =\n    // tslint:disable-next-line:no-any legacy decorator\n    (options: AddEventListenerOptions, proto: any, name: PropertyKey) => {\n      Object.assign(proto[name], options);\n    };\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options: AddEventListenerOptions) =>\n    // Return value typed as any to prevent TypeScript from complaining that\n    // standard decorator function signature does not match TypeScript decorator\n    // signature\n    // TODO(kschaaf): unclear why it was only failing on this decorator and not\n    // the others\n    ((protoOrDescriptor: Object|ClassElement, name?: string) =>\n         (name !== undefined) ?\n         legacyEventOptions(options, protoOrDescriptor as Object, name) :\n         standardEventOptions(options, protoOrDescriptor as ClassElement)) as\n        // tslint:disable-next-line:no-any decorator\n        any;\n","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const supportsAdoptingStyleSheets =\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\n\nconst constructionToken = Symbol();\n\nexport class CSSResult {\n  _styleSheet?: CSSStyleSheet|null;\n\n  readonly cssText: string;\n\n  constructor(cssText: string, safeToken: symbol) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n          'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n    this.cssText = cssText;\n  }\n\n  // Note, this is a getter so that it's lazy. In practice, this means\n  // stylesheets are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet|null {\n    if (this._styleSheet === undefined) {\n      // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n      // is constructable.\n      if (supportsAdoptingStyleSheets) {\n        this._styleSheet = new CSSStyleSheet();\n        this._styleSheet.replaceSync(this.cssText);\n      } else {\n        this._styleSheet = null;\n      }\n    }\n    return this._styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) => {\n  return new CSSResult(String(value), constructionToken);\n};\n\nconst textFromCSSResult = (value: CSSResult|number) => {\n  if (value instanceof CSSResult) {\n    return value.cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n        `Value passed to 'css' function must be a 'css' function result: ${\n            value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n  }\n};\n\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css =\n    (strings: TemplateStringsArray, ...values: (CSSResult|number)[]) => {\n      const cssText = values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]);\n      return new CSSResult(cssText, constructionToken);\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport {TemplateResult} from 'lit-html';\nimport {render} from 'lit-html/lib/shady-render.js';\n\nimport {PropertyValues, UpdatingElement} from './lib/updating-element.js';\n\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport {html, svg, TemplateResult, SVGTemplateResult} from 'lit-html/lit-html.js';\nimport {supportsAdoptingStyleSheets, CSSResult} from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n\ndeclare global {\n  interface Window {\n    litElementVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n\nexport interface CSSResultArray extends Array<CSSResult|CSSResultArray> {}\n\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(\n    styles: CSSResultArray, result: CSSResult[] = []): CSSResult[] {\n  for (let i = 0, length = styles.length; i < length; i++) {\n    const value = styles[i];\n    if (Array.isArray(value)) {\n      arrayFlat(value, result);\n    } else {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles: CSSResultArray): CSSResult[] =>\n    styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\n\nexport class LitElement extends UpdatingElement {\n\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   *\n   * Note this property name is a string to prevent breaking Closure JS Compiler\n   * optimizations. See updating-element.ts for more information.\n   */\n  protected static['finalized'] = true;\n  /**\n   * Render method used to render the lit-html TemplateResult to the element's\n   * DOM.\n   * @param {TemplateResult} Template to render.\n   * @param {Element|DocumentFragment} Node into which to render.\n   * @param {String} Element name.\n   * @nocollapse\n   */\n  static render = render;\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  static styles?: CSSResult|CSSResultArray;\n\n  private static _styles: CSSResult[]|undefined;\n\n  /** @nocollapse */\n  protected static finalize() {\n    // The Closure JS Compiler does not always preserve the correct \"this\"\n    // when calling static super methods (b/137460243), so explicitly bind.\n    super.finalize.call(this);\n    // Prepare styling that is stamped at first render time. Styling\n    // is built from user provided `styles` or is inherited from the superclass.\n    this._styles =\n        this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n        this._getUniqueStyles() :\n        this._styles || [];\n  }\n\n  /** @nocollapse */\n  private static _getUniqueStyles(): CSSResult[] {\n    // Take care not to call `this.styles` multiple times since this generates\n    // new CSSResults each time.\n    // TODO(sorvell): Since we do not cache CSSResults by input, any\n    // shared styles will generate new stylesheet objects, which is wasteful.\n    // This should be addressed when a browser ships constructable\n    // stylesheets.\n    const userStyles = this.styles;\n    const styles: CSSResult[] = [];\n    if (Array.isArray(userStyles)) {\n      const flatStyles = flattenStyles(userStyles);\n      // As a performance optimization to avoid duplicated styling that can\n      // occur especially when composing via subclassing, de-duplicate styles\n      // preserving the last item in the list. The last item is kept to\n      // try to preserve cascade order with the assumption that it's most\n      // important that last added styles override previous styles.\n      const styleSet = flatStyles.reduceRight((set, s) => {\n        set.add(s);\n        // on IE set.add does not return the set.\n        return set;\n      }, new Set<CSSResult>());\n      // Array.from does not work on Set in IE\n      styleSet.forEach((v) => styles.unshift(v));\n    } else if (userStyles) {\n      styles.push(userStyles);\n    }\n    return styles;\n  }\n\n  private _needsShimAdoptedStyleSheets?: boolean;\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   */\n  readonly renderRoot!: Element|DocumentFragment;\n\n  /**\n   * Performs element initialization. By default this calls `createRenderRoot`\n   * to create the element `renderRoot` node and captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    super.initialize();\n    (this as {renderRoot: Element | DocumentFragment}).renderRoot =\n        this.createRenderRoot();\n    // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n    // element's getRootNode(). While this could be done, we're choosing not to\n    // support this now since it would require different logic around de-duping.\n    if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n      this.adoptStyles();\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n  protected createRenderRoot(): Element|ShadowRoot {\n    return this.attachShadow({mode: 'open'});\n  }\n\n  /**\n   * Applies styling to the element shadowRoot using the `static get styles`\n   * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n   * available and will fallback otherwise. When Shadow DOM is polyfilled,\n   * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n   * is available but `adoptedStyleSheets` is not, styles are appended to the\n   * end of the `shadowRoot` to [mimic spec\n   * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n   */\n  protected adoptStyles() {\n    const styles = (this.constructor as typeof LitElement)._styles!;\n    if (styles.length === 0) {\n      return;\n    }\n    // There are three separate cases here based on Shadow DOM support.\n    // (1) shadowRoot polyfilled: use ShadyCSS\n    // (2) shadowRoot.adoptedStyleSheets available: use it.\n    // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n    // rendering\n    if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n      window.ShadyCSS.ScopingShim!.prepareAdoptedCssText(\n          styles.map((s) => s.cssText), this.localName);\n    } else if (supportsAdoptingStyleSheets) {\n      (this.renderRoot as ShadowRoot).adoptedStyleSheets =\n          styles.map((s) => s.styleSheet!);\n    } else {\n      // This must be done after rendering so the actual style insertion is done\n      // in `update`.\n      this._needsShimAdoptedStyleSheets = true;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // Note, first update/render handles styleElement so we only call this if\n    // connected after first update.\n    if (this.hasUpdated && window.ShadyCSS !== undefined) {\n      window.ShadyCSS.styleElement(this);\n    }\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(changedProperties: PropertyValues) {\n    super.update(changedProperties);\n    const templateResult = this.render() as unknown;\n    if (templateResult instanceof TemplateResult) {\n      (this.constructor as typeof LitElement)\n          .render(\n              templateResult,\n              this.renderRoot,\n              {scopeName: this.localName, eventContext: this});\n    }\n    // When native Shadow DOM is used but adoptedStyles are not supported,\n    // insert styling after rendering to ensure adoptedStyles have highest\n    // priority.\n    if (this._needsShimAdoptedStyleSheets) {\n      this._needsShimAdoptedStyleSheets = false;\n      (this.constructor as typeof LitElement)._styles!.forEach((s) => {\n        const style = document.createElement('style');\n        style.textContent = s.cssText;\n        this.renderRoot.appendChild(style);\n      });\n    }\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  protected render(): TemplateResult|void {\n  }\n}\n","import { LitElement } from \"lit-element\";\r\n\r\nclass PdbTopologyViewer extends LitElement {\r\n\r\n  static get properties() {\r\n    return {\r\n      pdbId: { type: String, attribute: 'pdb-id'},\r\n      entityId: { type: String, attribute: 'entity-id'},\r\n      chainId: { type: String, attribute: 'chain-id'}\r\n    };\r\n  }\r\n\r\n  validateParams() {\r\n    if(typeof this.pdbId == 'undefined' || typeof this.entityId == 'undefined' || typeof this.chainId == 'undefined') return false;\r\n    return true\r\n  }\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n  }\r\n\r\n  invokePlugin(){\r\n    let paramValidatity = this.validateParams();\r\n    if(!paramValidatity) return\r\n\r\n    // create an instance of the plugin\r\n    if(typeof this.viewInstance == 'undefined') this.viewInstance = new PdbTopologyViewerPlugin();\r\n    this.viewInstance.render(this, this.entityId, this.pdbId, this.chainId);\r\n  }\r\n\r\n  updated() {\r\n    this.invokePlugin();\r\n  }\r\n\r\n  createRenderRoot() {\r\n    return this;\r\n  }\r\n\r\n}\r\n\r\nexport default PdbTopologyViewer;\r\n\r\ncustomElements.define('pdb-topology-viewer', PdbTopologyViewer);"],"sourceRoot":""}